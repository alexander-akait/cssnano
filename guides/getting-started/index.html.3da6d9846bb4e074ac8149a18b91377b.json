{"head":{"title":"Getting started","layout":"Guide","order":2,"description":"What is a build process? A build process is a sequence of tasks, usually automated, that you run each time that you want to deploy a newâ€¦"},"body":"<h2 id=\"what-is-a-build-process\"><a href=\"#what-is-a-build-process\" class=\"phenomic-HeadingAnchor\">#</a>What is a build process?</h2>\n<p>A build process is a sequence of tasks, usually automated, that you run each\ntime that you want to deploy a new release of your application. cssnano fits\ninto this build process as a tool that should be run on your development CSS,\nand in turn will create compressed production assets. These are then uploaded\nto your production server or CDN.</p>\n<p>There are a number of different ways that you can compose a build process; we\nrecommend using the command line, but you might also want to consider an\nabstraction such as <a href=\"http://gulpjs.com/\">gulp</a>, especially for more complex\nsystems.</p>\n<h2 id=\"installing-nodejs--npm\"><a href=\"#installing-nodejs--npm\" class=\"phenomic-HeadingAnchor\">#</a>Installing Node.js &#x26; npm</h2>\n<p>cssnano is installed using the command line, using <a href=\"https://npmjs.com\">npm</a>; so\nyou will need to use an application such as Terminal or the Windows Command\nPrompt. If you don't already have Node.js installed, then you'll need to\nfollow these instructions:</p>\n<p>We require a minimum of Node.js version 6.9.0 &#x26; npm 3.10.8 to run, and we\nrecommend that you install <a href=\"https://github.com/creationix/nvm\">nvm</a> to manage\nyour Node.js versions.</p>\n<p>Alternately, you can <a href=\"https://nodejs.org/en/\">visit the Node.js website</a> and\nfollow the instructions there to install it for your machine.</p>\n<p>Once you have installed Node.js &#x26; npm, you can run this command to install\ncssnano into your project:</p>\n<pre><code class=\"hljs language-shell\">npm install cssnano --save-dev</code></pre>\n<p>Note that for most typical setups, we recommend that you compress your CSS\nduring your deployment step, so that when it is uploaded to your server/CDN\nit is already optimized. In most cases, you should not need to install cssnano\non your web server.</p>\n<h2 id=\"using-postcss-cli\"><a href=\"#using-postcss-cli\" class=\"phenomic-HeadingAnchor\">#</a>Using PostCSS CLI</h2>\n<p>Once you have cssnano installed, you will need a PostCSS runner in order to\nuse it to compress your CSS files. We recommend the PostCSS command line module,\nbut you can use any of the alternatives listed in the next section.</p>\n<p>You can install <a href=\"https://github.com/postcss/postcss-cli\">PostCSS CLI</a>\nwith this command:</p>\n<pre><code class=\"hljs language-shell\">npm install postcss-cli --global</code></pre>\n<p>Once you have done this, you will need to configure cssnano by creating a\n<code>postcss.config.js</code> file in the root of your project. This should contain\ncssnano as well as any other <a href=\"https://github.com/postcss/postcss/blob/master/site/plugins.md\">plugins</a> that you might want for your project;\nas an example:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">plugins</span>: [\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'cssnano'</span>)({\n            <span class=\"hljs-attr\">preset</span>: <span class=\"hljs-string\">'default'</span>,\n        }),\n    ],\n};</code></pre>\n<p><em>Read more about presets in <a href=\"/guides/presets\">our presets guide</a>.</em></p>\n<p>You can now minify your CSS files! Try it out by creating a CSS file in your\nproject named <code>input.css</code>, with some styles in there. Then, run:</p>\n<pre><code class=\"hljs language-shell\">postcss input.css > output.css</code></pre>\n<p>You should then see an <code>output.css</code> with the same styles but compressed!</p>\n<p>Note that you can also find a <a href=\"https://github.com/ben-eb/cssnano/tree/master/packages/example-cli-usage\">basic example</a> in our GitHub repository.</p>\n<h2 id=\"alternatives-to-using-the-cli\"><a href=\"#alternatives-to-using-the-cli\" class=\"phenomic-HeadingAnchor\">#</a>Alternatives to using the CLI</h2>\n<p>You can also use any of the other available PostCSS runners to manage your\nCSS compression; these are the most common.</p>\n<h3 id=\"grunt\"><a href=\"#grunt\" class=\"phenomic-HeadingAnchor\">#</a>Grunt</h3>\n<p>Use <a href=\"https://github.com/nDmitry/grunt-postcss\">grunt-postcss</a>.</p>\n<h3 id=\"gulp\"><a href=\"#gulp\" class=\"phenomic-HeadingAnchor\">#</a>Gulp</h3>\n<p>Use <a href=\"https://github.com/postcss/gulp-postcss\">gulp-postcss</a>.</p>\n<h3 id=\"webpack\"><a href=\"#webpack\" class=\"phenomic-HeadingAnchor\">#</a>Webpack</h3>\n<p>Currently, cssnano is bundled with <a href=\"https://github.com/webpack-contrib/css-loader\">css-loader</a>, so you don't need to load it\nyourself. However, you can also use cssnano explicitly with <a href=\"https://github.com/postcss/postcss-loader\">postcss-loader</a>.</p>\n<h3 id=\"others\"><a href=\"#others\" class=\"phenomic-HeadingAnchor\">#</a>Others</h3>\n<p>See the <a href=\"https://github.com/postcss/postcss#usage\">PostCSS documentation</a> for\nother available runners.</p>\n","__filename":"guides/getting-started.md","__url":"/guides/getting-started/","__resourceUrl":"/guides/getting-started/index.html","__dataUrl":"/guides/getting-started/index.html.3da6d9846bb4e074ac8149a18b91377b.json"}